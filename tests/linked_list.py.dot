digraph g {
  "self[t3]" -> "self[t3]";
  "class List:</br>  def __init__(self, x, next):</br>    self.x = x</br>    self.next = next</br></br>  def cons(self, x):</br>    return List(x, self)</br></br>[t0]" -> "class List:</br>  def __init__(self, x, next):</br>    self.x = x</br>    self.next = next</br></br>  def cons(self, x):</br>    return List(x, self)</br></br>[t0]";
  "next[t5]" -> "self.next[t7]";
  "class List:</br>  def __init__(self, x, next):</br>    self.x = x</br>    self.next = next</br></br>  def cons(self, x):</br>    return List(x, self)</br></br>[t0]" -> "self[t3]";
  "self[t3]" -> "self.next[t7]";
  "class List:</br>  def __init__(self, x, next):</br>    self.x = x</br>    self.next = next</br></br>  def cons(self, x):</br>    return List(x, self)</br></br>[t0]" -> "next[t5]";
  "self[t3]" -> "next[t5]";
  "List(x, self)[t15]" -> "return List(x, self)[t14]";
  "self[t12]" -> "next[t5]";
  "x[t13]" -> "self.x[t6]";
  "self[t3]" -> "List(x, self)[t15]";
  "x[t4]" -> "self.x[t6]";
  "class List:</br>  def __init__(self, x, next):</br>    self.x = x</br>    self.next = next</br></br>  def cons(self, x):</br>    return List(x, self)</br></br>[t0]" -> "return List(x, self)[t14]";
  "class List:</br>  def __init__(self, x, next):</br>    self.x = x</br>    self.next = next</br></br>  def cons(self, x):</br>    return List(x, self)</br></br>[t0]" -> "List(x, self)[t15]";
  "1[t22]" -> "self.x[t6]";
  "class List:</br>  def __init__(self, x, next):</br>    self.x = x</br>    self.next = next</br></br>  def cons(self, x):</br>    return List(x, self)</br></br>[t0]" -> "l[t17]";
  "1[t22]" -> "x[t4]";
  "self[t3]" -> "class List:</br>  def __init__(self, x, next):</br>    self.x = x</br>    self.next = next</br></br>  def cons(self, x):</br>    return List(x, self)</br></br>[t0]";
  "class List:</br>  def __init__(self, x, next):</br>    self.x = x</br>    self.next = next</br></br>  def cons(self, x):</br>    return List(x, self)</br></br>[t0]" -> "List(2, None)[t20]";
  "List(x, self)[t15]" -> "List(2, None).cons(1).cons(0)[t26]";
  "None[t19]" -> "next[t5]";
  "self[t3]" -> "List(2, None)[t20]";
  "self[t12]" -> "List(2, None)[t20]";
  "List[t9]" -> "List[t16]";
  "return List(x, self)[t14]" -> "List(2, None).cons(1).cons(0)[t26]";
  "self[t12]" -> "List(2, None).cons(1)[t23]";
  "0[t25]" -> "x[t4]";
  "List(x, self)[t15]" -> "l[t17]";
  "self[t12]" -> "self[t12]";
  "class List:</br>  def __init__(self, x, next):</br>    self.x = x</br>    self.next = next</br></br>  def cons(self, x):</br>    return List(x, self)</br></br>[t0]" -> "xs.next[t33]";
  "self[t3]" -> "l[t17]";
  "cons:((t13) -> t14)" -> "xs[t29]";
  "cons:((t13) -> t14)" -> "List(2, None).cons(1).cons(0)[t26]";
  "0 if xs == None else (1 + length(xs.next))[t36]" -> "length(xs.next)[t34]";
  "self.next[t7]" -> "xs.next[t33]";
  "cons:((t13) -> t14)" -> "List(2, None).cons(1)[t23]";
  "cons:((t13) -> t14)" -> "List(2, None)[t20]";
  "class List:</br>  def __init__(self, x, next):</br>    self.x = x</br>    self.next = next</br></br>  def cons(self, x):</br>    return List(x, self)</br></br>[t0]" -> "self.next[t7]";
  "None[t19]" -> "__eq__:((t19) -> Bool)";
  "self[t12]" -> "xs.next[t33]";
  "cons:((t13) -> t14)" -> "l[t17]";
  "cons:((t13) -> t14)" -> "return List(x, self)[t14]";
  "cons:((t13) -> t14)" -> "List(x, self)[t15]";
  "cons:((t13) -> t14)" -> "self[t12]";
  "None[t19]" -> "next:t33";
  "x:t6" -> "xs.next[t33]";
  "x[t13]" -> "x[t4]";
  "return 0 if xs == None else (1 + length(xs.next))[t30]" -> "length(l)[t38]";
  "cons:((t13) -> t14)" -> "self.next[t7]";
  "0 if xs == None else (1 + length(xs.next))[t36]" -> "return 0 if xs == None else (1 + length(xs.next))[t30]";
  "cons:((t13) -> t14)" -> "next[t5]";
  "xs.next[t33]" -> "xs[t29]";
  "cons:((t13) -> t14)" -> "self[t3]";
  "cons:((t13) -> t14)" -> "class List:</br>  def __init__(self, x, next):</br>    self.x = x</br>    self.next = next</br></br>  def cons(self, x):</br>    return List(x, self)</br></br>[t0]";
  "return List(x, self)[t14]" -> "xs[t29]";
  "self[t12]" -> "__eq__:((t19) -> Bool)";
  "self[t12]" -> "return List(x, self)[t14]";
  "self[t12]" -> "self.next[t7]";
  "next[t5]" -> "__eq__:((t19) -> Bool)";
  "self[t12]" -> "class List:</br>  def __init__(self, x, next):</br>    self.x = x</br>    self.next = next</br></br>  def cons(self, x):</br>    return List(x, self)</br></br>[t0]";
  "self.next[t7]" -> "__eq__:((t19) -> Bool)";
  "x:t6" -> "xs[t29]";
  "self[t3]" -> "__eq__:((t19) -> Bool)";
  "self[t3]" -> "return List(x, self)[t14]";
  "xs[t29]" -> "__eq__:((t19) -> Bool)";
  "1[t32]" -> "__add__:((t34) -> t35)";
  "self[t3]" -> "next:t33";
  "None[t19]" -> "xs[t29]";
  "List(2, None).cons(1).cons(0)[t26]" -> "__eq__:((t19) -> Bool)";
  "self[t12]" -> "self[t3]";
  "l[t17]" -> "__eq__:((t19) -> Bool)";
  "None[t19]" -> "self.next[t7]";
  "next:t7" -> "__eq__:((t19) -> Bool)";
  "self[t12]" -> "List(x, self)[t15]";
  "(t28 -> t30)" -> "length[t27]";
  "x:t6" -> "__eq__:((t19) -> Bool)";
  "x:t6" -> "List(2, None).cons(1).cons(0)[t26]";
  "self[t12]" -> "xs[t29]";
  "x:t6" -> "List(2, None).cons(1)[t23]";
  "x:t6" -> "List(2, None)[t20]";
  "xs.next[t33]" -> "__eq__:((t19) -> Bool)";
  "((t4, t5) -> t0)" -> "List[t16]";
  "x:t6" -> "l[t17]";
  "x:t6" -> "List(x, self)[t15]";
  "x:t6" -> "return List(x, self)[t14]";
  "x:t6" -> "self[t12]";
  "((t4, t5) -> t0)" -> "List[t9]";
  "x:t6" -> "self.next[t7]";
  "2[t18]" -> "self.x[t6]";
  "x:t6" -> "next[t5]";
  "x:t6" -> "self[t3]";
  "__init__:((t4, t5) -> t8)" -> "cons:t21";
  "x:t6" -> "class List:</br>  def __init__(self, x, next):</br>    self.x = x</br>    self.next = next</br></br>  def cons(self, x):</br>    return List(x, self)</br></br>[t0]";
  "self[t3]" -> "xs[t29]";
  "0 if xs == None else (1 + length(xs.next))[t36]" -> "i[t37]";
  "2[t18]" -> "x[t4]";
  "0[t31]" -> "1[Num]";
  "class List:</br>  def __init__(self, x, next):</br>    self.x = x</br>    self.next = next</br></br>  def cons(self, x):</br>    return List(x, self)</br></br>[t0]" -> "List(2, None).cons(1)[t23]";
  "return 0 if xs == None else (1 + length(xs.next))[t30]" -> "1[Num]";
  "List(x, self)[t15]" -> "List(2, None).cons(1)[t23]";
  "return List(x, self)[t14]" -> "List(2, None).cons(1)[t23]";
  "self[t12]" -> "List(2, None).cons(1).cons(0)[t26]";
  "xs == None[Bool]" -> "Bool";
  "class List:</br>  def __init__(self, x, next):</br>    self.x = x</br>    self.next = next</br></br>  def cons(self, x):</br>    return List(x, self)</br></br>[t0]" -> "List(2, None).cons(1).cons(0)[t26]";
  "__init__:((t4, t5) -> t8)" -> "cons:t24";
  "1[t22]" -> "x[t13]";
  "List(x, self)[t15]" -> "xs[t29]";
  "self[t12]" -> "l[t17]";
  "length[t27]" -> "((t17) -> t38)";
  "next:t7" -> "cons:t24";
  "0[t31]" -> "return 0 if xs == None else (1 + length(xs.next))[t30]";
  "l[t17]" -> "next:t33";
  "(1 + length(xs.next))[t35]" -> "i[t37]";
  "0[t25]" -> "self.x[t6]";
  "next:t7" -> "cons:t21";
  "self[t3]" -> "xs.next[t33]";
  "return List(x, self)[t14]" -> "next:t33";
  "l[t17]" -> "xs[t29]";
  "self, x, next[t2]" -> "(t3, t4, t5)";
  "next[t5]" -> "xs[t29]";
  "(1 + length(xs.next))[t35]" -> "0 if xs == None else (1 + length(xs.next))[t36]";
  "next[t5]" -> "xs.next[t33]";
  "__init__:((t4, t5) -> t8)" -> "next:t33";
  "(t17)" -> "xs[t28]";
  "List(2, None).cons(1).cons[t24]" -> "((t25) -> t26)";
  "return 0 if xs == None else (1 + length(xs.next))[t30]" -> "i[t37]";
  "self[t3]" -> "List(2, None).cons(1).cons(0)[t26]";
  "(1 + length(xs.next))[t35]" -> "1[Num]";
  "List(x, self)[t15]" -> "next:t33";
  "self[t12]" -> "next:t33";
  "List[t9]" -> "((t13, t12) -> t15)";
  "next[t5]" -> "next:t33";
  "0[Num]" -> "1[Num]";
  "class List:</br>  def __init__(self, x, next):</br>    self.x = x</br>    self.next = next</br></br>  def cons(self, x):</br>    return List(x, self)</br></br>[t0]" -> "next:t33";
  "(t33)" -> "xs[t28]";
  "xs[t29]" -> "next:t33";
  "List(2, None).cons(1).cons(0)[t26]" -> "next:t33";
  "cons:((t13) -> t14)" -> "__eq__:((t19) -> Bool)";
  "xs.next[t33]" -> "next:t33";
  "class List:</br>  def __init__(self, x, next):</br>    self.x = x</br>    self.next = next</br></br>  def cons(self, x):</br>    return List(x, self)</br></br>[t0]" -> "xs[t29]";
  "0[Num]" -> "length(xs.next)[t34]";
  "List(2, None).cons[t21]" -> "((t22) -> t23)";
  "next:t7" -> "self[t12]";
  "next:t7" -> "return List(x, self)[t14]";
  "next:t7" -> "List(x, self)[t15]";
  "next:t7" -> "class List:</br>  def __init__(self, x, next):</br>    self.x = x</br>    self.next = next</br></br>  def cons(self, x):</br>    return List(x, self)</br></br>[t0]";
  "next:t7" -> "self[t3]";
  "next:t7" -> "next[t5]";
  "next:t7" -> "self.next[t7]";
  "cons:((t13) -> t14)" -> "next:t33";
  "next:t7" -> "List(2, None).cons(1).cons(0)[t26]";
  "0[t25]" -> "x[t13]";
  "next:t7" -> "xs[t29]";
  "next:t7" -> "l[t17]";
  "next:t7" -> "List(2, None)[t20]";
  "next:t7" -> "List(2, None).cons(1)[t23]";
  "(1 + length(xs.next))[t35]" -> "length(l)[t38]";
  "self, x[t11]" -> "(t12, t13)";
  "0 if xs == None else (1 + length(xs.next))[t36]" -> "length(l)[t38]";
  "length[t27]" -> "((t33) -> t34)";
  "List(2, None).cons(1).cons(0)[t26]" -> "l[t17]";
  "length(xs.next)[t34]" -> "1[Num]";
  "1[Num]" -> "1[t32]";
  "0[Num]" -> "length(l)[t38]";
  "0[Num]" -> "i[t37]";
  "0[Num]" -> "0 if xs == None else (1 + length(xs.next))[t36]";
  "x:t6" -> "cons:t24";
  "self.next[t7]" -> "xs[t29]";
  "0[t31]" -> "i[t37]";
  "2[Num]" -> "2[t18]";
  "0[t31]" -> "0 if xs == None else (1 + length(xs.next))[t36]";
  "1[Num]" -> "1[t22]";
  "length(l)[t38]" -> "i[t37]";
  "return 0 if xs == None else (1 + length(xs.next))[t30]" -> "length(xs.next)[t34]";
  "0[Num]" -> "0[t25]";
  "0[Num]" -> "0[t31]";
  "0[Num]" -> "return 0 if xs == None else (1 + length(xs.next))[t30]";
  "class List:</br>  def __init__(self, x, next):</br>    self.x = x</br>    self.next = next</br></br>  def cons(self, x):</br>    return List(x, self)</br></br>[t0]" -> "self[t12]";
  "(1 + length(xs.next))[t35]" -> "return 0 if xs == None else (1 + length(xs.next))[t30]";
  "x:t6" -> "next:t33";
  "2[Num]" -> "self.x[t6]";
  "2[Num]" -> "x[t4]";
  "1[Num]" -> "x[t13]";
  "return List(x, self)[t14]" -> "cons:t24";
  "xs[t28]" -> "(t29)";
  "List(2, None)[t20]" -> "cons:t21";
  "(1 + length(xs.next))[t35]" -> "length(xs.next)[t34]";
  "List(2, None).cons(1)[t23]" -> "cons:t24";
  "List(x, self)[t15]" -> "__eq__:((t19) -> Bool)";
  "return List(x, self)[t14]" -> "__eq__:((t19) -> Bool)";
  "List(x, self)[t15]" -> "cons:t24";
  "self[t3]" -> "cons:t21";
  "class List:</br>  def __init__(self, x, next):</br>    self.x = x</br>    self.next = next</br></br>  def cons(self, x):</br>    return List(x, self)</br></br>[t0]" -> "cons:t21";
  "self[t12]" -> "cons:t24";
  "self[t3]" -> "cons:t24";
  "self[t12]" -> "cons:t21";
  "class List:</br>  def __init__(self, x, next):</br>    self.x = x</br>    self.next = next</br></br>  def cons(self, x):</br>    return List(x, self)</br></br>[t0]" -> "cons:t24";
  "List[t16]" -> "((t18, t19) -> t20)";
  "__init__:((t4, t5) -> t8)" -> "__eq__:((t19) -> Bool)";
  "((t13) -> t14)" -> "List(2, None).cons[t21]";
  "0[t31]" -> "length(l)[t38]";
  "List[t9]" -> "((t18, t19) -> t20)";
  "return List(x, self)[t14]" -> "l[t17]";
  "self[t3]" -> "self[t12]";
  "__init__:((t4, t5) -> t8)" -> "xs.next[t33]";
  "class List:</br>  def __init__(self, x, next):</br>    self.x = x</br>    self.next = next</br></br>  def cons(self, x):</br>    return List(x, self)</br></br>[t0]" -> "__eq__:((t19) -> Bool)";
  "0 if xs == None else (1 + length(xs.next))[t36]" -> "1[Num]";
  "self.next[t7]" -> "next:t33";
  "self[t3]" -> "List(2, None).cons(1)[t23]";
  "next:t7" -> "xs.next[t33]";
  "((t13) -> t14)" -> "List(2, None).cons(1).cons[t24]";
  "1[Num]" -> "(1 + length(xs.next))[t35]";
  "0[t31]" -> "length(xs.next)[t34]";
  "None[t19]" -> "xs.next[t33]";
  "__init__:((t4, t5) -> t8)" -> "List(x, self)[t15]";
  "__init__:((t4, t5) -> t8)" -> "return List(x, self)[t14]";
  "__init__:((t4, t5) -> t8)" -> "self[t12]";
  "__init__:((t4, t5) -> t8)" -> "self[t3]";
  "x:t6" -> "cons:t21";
  "__init__:((t4, t5) -> t8)" -> "class List:</br>  def __init__(self, x, next):</br>    self.x = x</br>    self.next = next</br></br>  def cons(self, x):</br>    return List(x, self)</br></br>[t0]";
  "__init__:((t4, t5) -> t8)" -> "self.next[t7]";
  "__init__:((t4, t5) -> t8)" -> "next[t5]";
  "__init__:((t4, t5) -> t8)" -> "List(2, None).cons(1).cons(0)[t26]";
  "List(2, None).cons(1).cons(0)[t26]" -> "xs[t29]";
  "__init__:((t4, t5) -> t8)" -> "xs[t29]";
  "cons:((t13) -> t14)" -> "xs.next[t33]";
  "__init__:((t4, t5) -> t8)" -> "l[t17]";
  "__init__:((t4, t5) -> t8)" -> "List(2, None).cons(1)[t23]";
  "__init__:((t4, t5) -> t8)" -> "List(2, None)[t20]";
}