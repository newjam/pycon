digraph g {
  "self[t3]" -> "self[t3]";
  "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t0]" -> "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t0]";
  "r[t4]" -> "self.r[t6]";
  "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t0]" -> "self[t3]";
  "'wat'[t30]" -> "self.r[t15]";
  "Complex(2.0, 1.0)[t28]" -> "c1[t25]";
  "(self.i + other.i)[t21]" -> "self.i[t19]";
  "(self.i + other.i)[t21]" -> "i[t18]";
  "r[t14]" -> "self.r[t6]";
  "self.r[t6]" -> "self.r[t15]";
  "r[t14]" -> "r[t4]";
  "r[t4]" -> "self.r[t15]";
  "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t0]" -> "self[t12]";
  "i[t5]" -> "self.i[t7]";
  "'wat'[t30]" -> "other.r[t16]";
  "self[t3]" -> "self[t12]";
  "(self.i + other.i)[t21]" -> "i[t5]";
  "Complex[t9]" -> "Complex[t24]";
  "(self.i + other.i)[t21]" -> "self.i[t7]";
  "self[t3]" -> "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t0]";
  "self[t3]" -> "Complex(r, i)[t23]";
  "(self.r + other.r)[t17]" -> "r[t4]";
  "i[t5]" -> "self.i[t19]";
  "i[t18]" -> "i[t5]";
  "'wat'[t30]" -> "self.r[t6]";
  "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t0]" -> "c1[t25]";
  "self[t12]" -> "return Complex(r, i)[t22]";
  "self[t12]" -> "Complex(r, i)[t23]";
  "1.0[t27]" -> "self.i[t7]";
  "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t0]" -> "c2[t29]";
  "(self.r + other.r)[t17]" -> "self.r[t15]";
  "(self.r + other.r)[t17]" -> "r[t14]";
  "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t0]" -> "Complex('wat', 1.0)[t32]";
  "self[t3]" -> "(c1 + c2)[t34]";
  "2.0[t26]" -> "self.r[t15]";
  "self[t3]" -> "Complex('wat', 1.0)[t32]";
  "Complex(r, i)[t23]" -> "return Complex(r, i)[t22]";
  "i[t18]" -> "other.i[t20]";
  "i:t7" -> "__add__:((t29) -> t34)";
  "self[t12]" -> "Complex('wat', 1.0)[t32]";
  "Complex('wat', 1.0)[t32]" -> "other[t13]";
  "self[t12]" -> "(c1 + c2)[t34]";
  "1.0[t27]" -> "self.i[t19]";
  "return Complex(r, i)[t22]" -> "(c1 + c2)[t34]";
  "Complex(r, i)[t23]" -> "(c1 + c2)[t34]";
  "Complex(r, i)[t23]" -> "c3[t33]";
  "return Complex(r, i)[t22]" -> "c3[t33]";
  "(self.r + other.r)[t17]" -> "'wat'[String]";
  "Complex('wat', 1.0)[t32]" -> "c2[t29]";
  "other.r[t16]" -> "'wat'[String]";
  "self.i[t7]" -> "other.i[t20]";
  "self[t3]" -> "r:t16";
  "c1[t25]" -> "__add__:((t29) -> t34)";
  "i[t18]" -> "1.0[Num]";
  "self[t12]" -> "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t0]";
  "2.0[Num]" -> "(self.r + other.r)[t17]";
  "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t0]" -> "other[t13]";
  "__add__:((t13) -> t22)" -> "(c1 + c2)[t34]";
  "1.0[t27]" -> "1.0[Num]";
  "other.r[t16]" -> "2.0[Num]";
  "self[t3]" -> "other[t13]";
  "self[t12]" -> "self[t3]";
  "r[t4]" -> "other.r[t16]";
  "__add__:((t13) -> t22)" -> "return Complex(r, i)[t22]";
  "self[t12]" -> "c2[t29]";
  "__init__:((t4, t5) -> t8)" -> "i:t19";
  "'wat'[String]" -> "'wat'[t30]";
  "__add__:((t13) -> t22)" -> "Complex(r, i)[t23]";
  "((t4, t5) -> t0)" -> "Complex[t24]";
  "Complex[t24]" -> "((t30, t31) -> t32)";
  "__add__:((t13) -> t22)" -> "c1[t25]";
  "1.0[Num]" -> "other.i[t20]";
  "i[t18]" -> "self.i[t7]";
  "__add__:((t13) -> t22)" -> "c2[t29]";
  "__add__:((t13) -> t22)" -> "Complex(2.0, 1.0)[t28]";
  "__add__:((t13) -> t22)" -> "self[t3]";
  "r:t6" -> "c2[t29]";
  "__add__:((t13) -> t22)" -> "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t0]";
  "((t4, t5) -> t0)" -> "Complex[t9]";
  "Complex[t9]" -> "((t30, t31) -> t32)";
  "r:t6" -> "Complex(2.0, 1.0)[t28]";
  "self.i[t7]" -> "self.i[t19]";
  "2.0[t26]" -> "'wat'[String]";
  "self[t3]" -> "return Complex(r, i)[t22]";
  "__add__:((t13) -> t22)" -> "other[t13]";
  "__add__:((t13) -> t22)" -> "self[t12]";
  "2.0[t26]" -> "r[t4]";
  "self[t3]" -> "c2[t29]";
  "self.r[t15]" -> "__add__:((t16) -> t17)";
  "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t0]" -> "return Complex(r, i)[t22]";
  "1.0[Num]" -> "i[t5]";
  "__init__:((t4, t5) -> t8)" -> "i:t20";
  "1.0[Num]" -> "1.0[t31]";
  "Complex[t9]" -> "((t26, t27) -> t28)";
  "(self.r + other.r)[t17]" -> "self.r[t6]";
  "i:t7" -> "r:t16";
  "self.r[t6]" -> "__add__:((t16) -> t17)";
  "r:t6" -> "i:t19";
  "r[t4]" -> "__add__:((t16) -> t17)";
  "2.0[t26]" -> "__add__:((t16) -> t17)";
  "i:t7" -> "r:t15";
  "'wat'[t30]" -> "__add__:((t16) -> t17)";
  "__init__:((t4, t5) -> t8)" -> "r:t15";
  "(self.r + other.r)[t17]" -> "__add__:((t16) -> t17)";
  "Complex[t24]" -> "((t26, t27) -> t28)";
  "self[t12]" -> "self[t12]";
  "self[t3]" -> "c1[t25]";
  "(self.i + other.i)[t21]" -> "other.i[t20]";
  "'wat'[String]" -> "r[t4]";
  "'wat'[String]" -> "self.r[t6]";
  "2.0[t26]" -> "self.r[t6]";
  "'wat'[String]" -> "self.r[t15]";
  "self[t12]" -> "c1[t25]";
  "'wat'[String]" -> "(self.r + other.r)[t17]";
  "r[t14]" -> "self.r[t15]";
  "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t0]" -> "Complex(r, i)[t23]";
  "self.i[t7]" -> "1.0[Num]";
  "self[t3]" -> "Complex(2.0, 1.0)[t28]";
  "2.0[Num]" -> "self.r[t6]";
  "__add__:((t13) -> t22)" -> "Complex('wat', 1.0)[t32]";
  "__init__:((t4, t5) -> t8)" -> "Complex('wat', 1.0)[t32]";
  "self.i[t7]" -> "__add__:((t20) -> t21)";
  "i[t5]" -> "__add__:((t20) -> t21)";
  "r[t4]" -> "2.0[Num]";
  "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t0]" -> "(c1 + c2)[t34]";
  "i[t18]" -> "__add__:((t20) -> t21)";
  "self.i[t19]" -> "__add__:((t20) -> t21)";
  "self, r, i[t2]" -> "(t3, t4, t5)";
  "1.0[t31]" -> "self.i[t7]";
  "(self.i + other.i)[t21]" -> "__add__:((t20) -> t21)";
  "1.0[t27]" -> "__add__:((t20) -> t21)";
  "1.0[t31]" -> "__add__:((t20) -> t21)";
  "r:t6" -> "__add__:((t29) -> t34)";
  "2.0[t26]" -> "2.0[Num]";
  "2.0[Num]" -> "self.r[t15]";
  "r[t14]" -> "2.0[Num]";
  "'wat'[String]" -> "other.r[t16]";
  "i[t5]" -> "1.0[Num]";
  "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t0]" -> "r:t16";
  "(c1 + c2)[t34]" -> "c3[t33]";
  "i[t5]" -> "other.i[t20]";
  "self.r[t6]" -> "other.r[t16]";
  "2.0[Num]" -> "'wat'[String]";
  "1.0[Num]" -> "1.0[Num]";
  "__add__:((t13) -> t22)" -> "r:t15";
  "__add__:((t13) -> t22)" -> "r:t16";
  "'wat'[t30]" -> "r[t4]";
  "__init__:((t4, t5) -> t8)" -> "c2[t29]";
  "self[t12]" -> "__add__:((t29) -> t34)";
  "self[t12]" -> "other[t13]";
  "(self.r + other.r)[t17]" -> "2.0[Num]";
  "r[t14]" -> "__add__:((t16) -> t17)";
  "1.0[t31]" -> "self.i[t19]";
  "Complex[t9]" -> "((t14, t18) -> t23)";
  "__init__:((t4, t5) -> t8)" -> "r:t16";
  "2.0[t26]" -> "other.r[t16]";
  "r:t6" -> "i:t20";
  "Complex(2.0, 1.0)[t28]" -> "__add__:((t29) -> t34)";
  "2.0[Num]" -> "other.r[t16]";
  "'wat'[t30]" -> "2.0[Num]";
  "'wat'[String]" -> "'wat'[String]";
  "Complex('wat', 1.0)[t32]" -> "r:t16";
  "self, other[t11]" -> "(t12, t13)";
  "self[t12]" -> "c3[t33]";
  "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t0]" -> "Complex(2.0, 1.0)[t28]";
  "1.0[t31]" -> "other.i[t20]";
  "r:t6" -> "c3[t33]";
  "r:t6" -> "Complex('wat', 1.0)[t32]";
  "r:t6" -> "(c1 + c2)[t34]";
  "1.0[t31]" -> "i[t5]";
  "1.0[Num]" -> "self.i[t19]";
  "1.0[Num]" -> "i[t18]";
  "r:t6" -> "Complex(r, i)[t23]";
  "r:t6" -> "return Complex(r, i)[t22]";
  "__init__:((t4, t5) -> t8)" -> "other[t13]";
  "1.0[Num]" -> "(self.i + other.i)[t21]";
  "other.i[t20]" -> "1.0[Num]";
  "1.0[Num]" -> "1.0[t27]";
  "2.0[Num]" -> "2.0[t26]";
  "r:t6" -> "c1[t25]";
  "c2[t29]" -> "other[t13]";
  "other[t13]" -> "r:t16";
  "self[t12]" -> "r:t16";
  "self[t12]" -> "r:t15";
  "1.0[Num]" -> "self.i[t7]";
  "r:t6" -> "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t0]";
  "r:t6" -> "self[t3]";
  "2.0[Num]" -> "r[t4]";
  "r:t6" -> "other[t13]";
  "r:t6" -> "self[t12]";
  "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t0]" -> "r:t15";
  "2.0[Num]" -> "r[t14]";
  "c2[t29]" -> "r:t16";
  "self[t3]" -> "r:t15";
  "__add__:((t13) -> t22)" -> "i:t19";
  "i[t18]" -> "self.i[t19]";
  "(self.r + other.r)[t17]" -> "other.r[t16]";
  "__add__:((t13) -> t22)" -> "i:t20";
  "self[t3]" -> "__add__:((t29) -> t34)";
  "(self.i + other.i)[t21]" -> "1.0[Num]";
  "self[t3]" -> "c3[t33]";
  "'wat'[t30]" -> "'wat'[String]";
  "1.0[t31]" -> "1.0[Num]";
  "i:t7" -> "c2[t29]";
  "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t0]" -> "__add__:((t29) -> t34)";
  "1.0[t27]" -> "i[t5]";
  "r[t14]" -> "'wat'[String]";
  "r[t14]" -> "other.r[t16]";
  "'wat'[String]" -> "r[t14]";
  "r[t4]" -> "'wat'[String]";
  "1.0[t27]" -> "other.i[t20]";
  "__init__:((t4, t5) -> t8)" -> "(c1 + c2)[t34]";
  "__init__:((t4, t5) -> t8)" -> "c3[t33]";
  "__init__:((t4, t5) -> t8)" -> "Complex(2.0, 1.0)[t28]";
  "i:t7" -> "(c1 + c2)[t34]";
  "i:t7" -> "c3[t33]";
  "i:t7" -> "Complex('wat', 1.0)[t32]";
  "self.r[t6]" -> "2.0[Num]";
  "i:t7" -> "Complex(r, i)[t23]";
  "self.r[t6]" -> "'wat'[String]";
  "'wat'[String]" -> "2.0[Num]";
  "__init__:((t4, t5) -> t8)" -> "__add__:((t29) -> t34)";
  "Complex('wat', 1.0)[t32]" -> "i:t20";
  "c2[t29]" -> "i:t20";
  "i:t7" -> "other[t13]";
  "i:t7" -> "self[t12]";
  "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t0]" -> "c3[t33]";
  "self[t12]" -> "Complex(2.0, 1.0)[t28]";
  "__init__:((t4, t5) -> t8)" -> "self[t12]";
  "__init__:((t4, t5) -> t8)" -> "self[t3]";
  "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t0]" -> "i:t20";
  "__init__:((t4, t5) -> t8)" -> "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t0]";
  "i:t7" -> "self[t3]";
  "__add__:((t13) -> t22)" -> "c3[t33]";
  "i:t7" -> "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t0]";
  "self[t12]" -> "i:t20";
  "other[t13]" -> "i:t20";
  "__init__:((t4, t5) -> t8)" -> "c1[t25]";
  "i:t7" -> "Complex(2.0, 1.0)[t28]";
  "i:t7" -> "c1[t25]";
  "self[t12]" -> "i:t19";
  "self[t3]" -> "i:t19";
  "i:t7" -> "return Complex(r, i)[t22]";
  "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t0]" -> "i:t19";
  "__init__:((t4, t5) -> t8)" -> "Complex(r, i)[t23]";
  "__init__:((t4, t5) -> t8)" -> "return Complex(r, i)[t22]";
  "self[t3]" -> "i:t20";
}