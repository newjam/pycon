digraph g {
  "self[t14]" -> "self[t14]";
  "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t11]" -> "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t11]";
  "i[t16]" -> "self.i[t18]";
  "(c1 + c2)[t10]" -> "c3[t9]";
  "Complex(2.0, 1.0)[t4]" -> "c1[t0]";
  "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t11]" -> "self[t14]";
  "self[t14]" -> "Complex('wat', 1.0)[t8]";
  "Complex(r, i)[t33]" -> "return Complex(r, i)[t32]";
  "self.r[t17]" -> "self.r[t25]";
  "'wat'[t6]" -> "r[t15]";
  "self[t14]" -> "Complex(2.0, 1.0)[t4]";
  "self[t14]" -> "c2[t5]";
  "i[t28]" -> "i[t16]";
  "Complex('wat', 1.0)[t8]" -> "c2[t5]";
  "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t11]" -> "c2[t5]";
  "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t11]" -> "Complex(2.0, 1.0)[t4]";
  "__init__:((t15, t16) -> t19)" -> "Complex('wat', 1.0)[t8]";
  "1.0[t3]" -> "self.i[t18]";
  "self[t22]" -> "Complex(2.0, 1.0)[t4]";
  "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t11]" -> "Complex('wat', 1.0)[t8]";
  "(self.r + other.r)[t27]" -> "r[t15]";
  "1.0[t7]" -> "self.i[t18]";
  "__init__:((t15, t16) -> t19)" -> "self[t14]";
  "1.0[t7]" -> "i[t16]";
  "__init__:((t15, t16) -> t19)" -> "c1[t0]";
  "1.0[t7]" -> "other.i[t30]";
  "1.0[t7]" -> "self.i[t29]";
  "2.0[t2]" -> "self.r[t25]";
  "__init__:((t15, t16) -> t19)" -> "Complex(2.0, 1.0)[t4]";
  "__init__:((t15, t16) -> t19)" -> "c2[t5]";
  "r[t15]" -> "self.r[t17]";
  "self[t14]" -> "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t11]";
  "r[t24]" -> "self.r[t25]";
  "Complex(r, i)[t33]" -> "c3[t9]";
  "r[t15]" -> "2.0[Num]";
  "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t11]" -> "Complex(r, i)[t33]";
  "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t11]" -> "return Complex(r, i)[t32]";
  "self[t14]" -> "return Complex(r, i)[t32]";
  "self[t14]" -> "Complex(r, i)[t33]";
  "self[t22]" -> "return Complex(r, i)[t32]";
  "r[t24]" -> "self.r[t17]";
  "__init__:((t15, t16) -> t19)" -> "return Complex(r, i)[t32]";
  "'wat'[String]" -> "self.r[t17]";
  "(self.r + other.r)[t27]" -> "self.r[t17]";
  "1.0[t3]" -> "i[t16]";
  "(self.r + other.r)[t27]" -> "self.r[t25]";
  "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t11]" -> "c1[t0]";
  "2.0[t2]" -> "__add__:((t26) -> t27)";
  "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t11]" -> "r:t25";
  "r[t15]" -> "__add__:((t26) -> t27)";
  "'wat'[String]" -> "'wat'[String]";
  "2.0[Num]" -> "self.r[t17]";
  "(self.i + other.i)[t31]" -> "self.i[t18]";
  "__add__:((t23) -> t32)" -> "(c1 + c2)[t10]";
  "__init__:((t15, t16) -> t19)" -> "(c1 + c2)[t10]";
  "1.0[Num]" -> "i[t16]";
  "__init__:((t15, t16) -> t19)" -> "self[t22]";
  "i[t28]" -> "self.i[t18]";
  "self.r[t17]" -> "__add__:((t26) -> t27)";
  "r[t24]" -> "other.r[t26]";
  "(self.i + other.i)[t31]" -> "i[t16]";
  "(self.r + other.r)[t27]" -> "__add__:((t26) -> t27)";
  "r[t24]" -> "__add__:((t26) -> t27)";
  "self.r[t25]" -> "__add__:((t26) -> t27)";
  "(self.r + other.r)[t27]" -> "r[t24]";
  "__add__:((t23) -> t32)" -> "c3[t9]";
  "__init__:((t15, t16) -> t19)" -> "c3[t9]";
  "c2[t5]" -> "r:t26";
  "__add__:((t23) -> t32)" -> "self[t14]";
  "self[t14]" -> "r:t26";
  "Complex[t1]" -> "((t24, t28) -> t33)";
  "c2[t5]" -> "other[t23]";
  "r[t24]" -> "'wat'[String]";
  "__init__:((t15, t16) -> t19)" -> "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t11]";
  "(self.r + other.r)[t27]" -> "2.0[Num]";
  "2.0[t2]" -> "self.r[t17]";
  "(self.r + other.r)[t27]" -> "'wat'[String]";
  "other.r[t26]" -> "2.0[Num]";
  "i[t28]" -> "other.i[t30]";
  "self[t22]" -> "Complex(r, i)[t33]";
  "'wat'[String]" -> "other.r[t26]";
  "2.0[Num]" -> "self.r[t25]";
  "self[t14]" -> "(c1 + c2)[t10]";
  "r[t15]" -> "other.r[t26]";
  "self[t22]" -> "other[t23]";
  "(self.i + other.i)[t31]" -> "other.i[t30]";
  "r[t24]" -> "2.0[Num]";
  "r[t15]" -> "self.r[t25]";
  "(self.r + other.r)[t27]" -> "other.r[t26]";
  "self[t22]" -> "(c1 + c2)[t10]";
  "1.0[Num]" -> "(self.i + other.i)[t31]";
  "'wat'[t6]" -> "self.r[t17]";
  "1.0[Num]" -> "other.i[t30]";
  "i:t18" -> "r:t25";
  "self[t14]" -> "self[t22]";
  "__add__:((t23) -> t32)" -> "return Complex(r, i)[t32]";
  "i:t18" -> "r:t26";
  "r:t17" -> "i:t30";
  "r:t17" -> "i:t29";
  "self[t22]" -> "c1[t0]";
  "i[t28]" -> "1.0[Num]";
  "self[t22]" -> "self[t22]";
  "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t11]" -> "(c1 + c2)[t10]";
  "1.0[t3]" -> "1.0[Num]";
  "'wat'[String]" -> "'wat'[t6]";
  "__add__:((t23) -> t32)" -> "self[t22]";
  "__add__:((t23) -> t32)" -> "other[t23]";
  "__init__:((t15, t16) -> t19)" -> "r:t26";
  "'wat'[t6]" -> "other.r[t26]";
  "'wat'[String]" -> "r[t15]";
  "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t11]" -> "self[t22]";
  "__add__:((t23) -> t32)" -> "c1[t0]";
  "Complex[t1]" -> "((t6, t7) -> t8)";
  "i[t28]" -> "self.i[t29]";
  "__add__:((t23) -> t32)" -> "Complex(2.0, 1.0)[t4]";
  "__add__:((t23) -> t32)" -> "c2[t5]";
  "r[t24]" -> "r[t15]";
  "r:t17" -> "self[t22]";
  "__add__:((t23) -> t32)" -> "Complex('wat', 1.0)[t8]";
  "'wat'[t6]" -> "self.r[t25]";
  "'wat'[String]" -> "self.r[t25]";
  "'wat'[String]" -> "r[t24]";
  "'wat'[String]" -> "(self.r + other.r)[t27]";
  "other.r[t26]" -> "'wat'[String]";
  "self.r[t17]" -> "2.0[Num]";
  "self.r[t17]" -> "'wat'[String]";
  "return Complex(r, i)[t32]" -> "c3[t9]";
  "self[t22]" -> "self[t14]";
  "self[t14]" -> "c3[t9]";
  "__add__:((t23) -> t32)" -> "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t11]";
  "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t11]" -> "r:t26";
  "2.0[t2]" -> "2.0[Num]";
  "__init__:((t15, t16) -> t19)" -> "__add__:((t5) -> t10)";
  "2.0[Num]" -> "r[t15]";
  "__init__:((t15, t16) -> t19)" -> "other[t23]";
  "2.0[t2]" -> "other.r[t26]";
  "self[t22]" -> "__add__:((t5) -> t10)";
  "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t11]" -> "__add__:((t5) -> t10)";
  "return Complex(r, i)[t32]" -> "(c1 + c2)[t10]";
  "self[t14]" -> "other[t23]";
  "self[t14]" -> "__add__:((t5) -> t10)";
  "c1[t0]" -> "__add__:((t5) -> t10)";
  "Complex(2.0, 1.0)[t4]" -> "__add__:((t5) -> t10)";
  "(self.i + other.i)[t31]" -> "i[t28]";
  "i:t18" -> "__add__:((t5) -> t10)";
  "2.0[Num]" -> "'wat'[String]";
  "1.0[Num]" -> "1.0[Num]";
  "Complex(r, i)[t33]" -> "(c1 + c2)[t10]";
  "self[t22]" -> "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t11]";
  "__add__:((t23) -> t32)" -> "r:t26";
  "self.i[t18]" -> "other.i[t30]";
  "1.0[t7]" -> "1.0[Num]";
  "i[t16]" -> "1.0[Num]";
  "self[t22]" -> "c2[t5]";
  "r:t17" -> "return Complex(r, i)[t32]";
  "r:t17" -> "Complex(r, i)[t33]";
  "__add__:((t23) -> t32)" -> "i:t30";
  "1.0[t7]" -> "__add__:((t30) -> t31)";
  "__add__:((t23) -> t32)" -> "i:t29";
  "(self.i + other.i)[t31]" -> "self.i[t29]";
  "2.0[t2]" -> "'wat'[String]";
  "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t11]" -> "other[t23]";
  "self.r[t17]" -> "other.r[t26]";
  "i[t16]" -> "__add__:((t30) -> t31)";
  "self.i[t18]" -> "__add__:((t30) -> t31)";
  "__init__:((t15, t16) -> t19)" -> "Complex(r, i)[t33]";
  "Complex[t1]" -> "((t2, t3) -> t4)";
  "i:t18" -> "c3[t9]";
  "self.i[t29]" -> "__add__:((t30) -> t31)";
  "i[t28]" -> "__add__:((t30) -> t31)";
  "(self.i + other.i)[t31]" -> "__add__:((t30) -> t31)";
  "1.0[Num]" -> "self.i[t18]";
  "r:t17" -> "c1[t0]";
  "self, r, i[t13]" -> "(t14, t15, t16)";
  "self[t14]" -> "r:t25";
  "r:t17" -> "Complex(2.0, 1.0)[t4]";
  "r:t17" -> "c2[t5]";
  "2.0[Num]" -> "(self.r + other.r)[t27]";
  "r:t17" -> "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t11]";
  "r:t17" -> "Complex('wat', 1.0)[t8]";
  "2.0[Num]" -> "r[t24]";
  "r:t17" -> "self[t14]";
  "other.i[t30]" -> "1.0[Num]";
  "1.0[Num]" -> "self.i[t29]";
  "1.0[Num]" -> "i[t28]";
  "1.0[Num]" -> "1.0[t3]";
  "2.0[Num]" -> "2.0[t2]";
  "__init__:((t15, t16) -> t19)" -> "r:t25";
  "__add__:((t23) -> t32)" -> "Complex(r, i)[t33]";
  "1.0[Num]" -> "1.0[t7]";
  "r:t17" -> "other[t23]";
  "r:t17" -> "(c1 + c2)[t10]";
  "Complex[t1]" -> "Complex[t1]";
  "self[t22]" -> "r:t25";
  "other[t23]" -> "r:t26";
  "self[t22]" -> "r:t26";
  "'wat'[t6]" -> "__add__:((t26) -> t27)";
  "1.0[t3]" -> "self.i[t29]";
  "2.0[t2]" -> "r[t15]";
  "1.0[t3]" -> "__add__:((t30) -> t31)";
  "i:t18" -> "other[t23]";
  "self, other[t21]" -> "(t22, t23)";
  "1.0[t3]" -> "other.i[t30]";
  "r:t17" -> "__add__:((t5) -> t10)";
  "((t15, t16) -> t11)" -> "Complex[t1]";
  "i[t16]" -> "other.i[t30]";
  "i:t18" -> "(c1 + c2)[t10]";
  "r[t15]" -> "'wat'[String]";
  "Complex('wat', 1.0)[t8]" -> "other[t23]";
  "self[t14]" -> "c1[t0]";
  "(self.i + other.i)[t31]" -> "1.0[Num]";
  "self[t22]" -> "Complex('wat', 1.0)[t8]";
  "Complex('wat', 1.0)[t8]" -> "i:t30";
  "i[t16]" -> "self.i[t29]";
  "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t11]" -> "c3[t9]";
  "self[t22]" -> "c3[t9]";
  "self.i[t18]" -> "self.i[t29]";
  "r:t17" -> "c3[t9]";
  "'wat'[t6]" -> "'wat'[String]";
  "'wat'[String]" -> "2.0[Num]";
  "__add__:((t23) -> t32)" -> "r:t25";
  "i:t18" -> "return Complex(r, i)[t32]";
  "i:t18" -> "Complex(r, i)[t33]";
  "self[t22]" -> "i:t30";
  "other[t23]" -> "i:t30";
  "self[t22]" -> "i:t29";
  "self.i[t18]" -> "1.0[Num]";
  "i:t18" -> "self[t22]";
  "__init__:((t15, t16) -> t19)" -> "i:t29";
  "__init__:((t15, t16) -> t19)" -> "i:t30";
  "2.0[Num]" -> "other.r[t26]";
  "'wat'[t6]" -> "2.0[Num]";
  "i:t18" -> "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t11]";
  "i:t18" -> "Complex('wat', 1.0)[t8]";
  "c2[t5]" -> "i:t30";
  "i:t18" -> "self[t14]";
  "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t11]" -> "i:t29";
  "Complex('wat', 1.0)[t8]" -> "r:t26";
  "self[t14]" -> "i:t30";
  "i:t18" -> "c1[t0]";
  "self[t14]" -> "i:t29";
  "class Complex:</br>  def __init__(self, r, i):</br>    self.r = r</br>    self.i = i</br></br>  def __add__(self, other):</br>    r = (self.r + other.r)</br>    i = (self.i + other.i)</br>    return Complex(r, i)</br></br>[t11]" -> "i:t30";
  "i:t18" -> "Complex(2.0, 1.0)[t4]";
  "i:t18" -> "c2[t5]";
}